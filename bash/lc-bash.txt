IF REQ'D - WHO I AM
INTRODUCE HELPERS
HOW STICKIES WORK
CONFIRM SCHEDULE

Have people download the sample folder http://labs.timtom.ch/files/lcshell.zip / http://bit.ly/lcshell

Question: using the terminal, who among you can navigate to your home directory and list the files it contains?
Handout: linux_cheat_sheet.pdf




WHAT IS THE SHELL AND WHY IT IS IMPORTANT
- keyboard, mouse & GUI great way to interact with computer, very intuitive
- not great for repetitive stuff -> takes time, causes (human) errors


- CLI still very much used to do exactly that, tell computers to do stuff over and over again. 
- Work on a bunch of files. Be able to do the very same thing on other files 6 months from now.
	-> repetitive
	-> reproducible

	---> PROGRAM

- a "shell" is a computer programm that interprets what we type, tells the computer what to do in computer-speak, then prints the result of the action:
R ead
E xecute
P print
L oop

- there are different shells, although they share a large set of commands. The most common nowadays is bash.
- by default, the Mac Terminal uses bash
- most Linux distros do too
 	how to be sure? type echo $SHELL
					  or ps
- the command prompt in Windows is also a shell, although it doesn't share the same command base as most UNIX shells
	to get a proper shell in Windows, use a 3rd-party like git-bash (comes with git)
	
	
	
HOW TO USE A SHELL
- launch Terminal on macOS or Git Bash on Windows
- Should end up with an empty window with a cursor blinking next to a "prompt"

- shell prompt ($ in bash)
- we type in commands
	- e.g. whoami

	- what the shell does is
		- it finds the whoami program
		- runs it
		- prints its output
		- displays a new prompt -> we can type new stuff


- files are organised in folders on your computer (or at least they should be)
- we can navigate those folders using Windows Explorer or the Finder
	- example to sample data

- now if I want to act on those files, I need to open the folder they're in in the Finder
	- example
- if I want to act on them using CLI, I also need to navigate to that folder
- how do I know?
- we can try whereami
- doesn't work
- most commands are shortcuts - PROGRAMMERS ARE LAZY PEOPLE

- we use pwd instead - PRINT WORKING DIRECTORY
- prints the whole path, from the root of the filesystem
- on a Mac, it's often something like /User/yourname/Documents etc.
- slashes separate folders and subfolders
- first slash tells it's the root



- CD to CHANGE DIRECTORY

- LS to list what's in a directory
	- filename conventions
	- extensions (can be hidden in the Finder but should always be here)
	- spaces and accented characters are bad news (but there are ways to get around)
	
- Examples use of CD to navigate up and down, relative vs absolute paths
- cd .. to go "up"
- cd to home dir
- cd / to root
- pwd to see where you are


AUTOCOMPLETE & HISTORY
- very useful trick, use the tab key to autocomplete!!
- up arrow: history
- CTRL-A and CTRL-E to jump to start and end of line in the shell



CHALLENGE
- Please download the sample directory if not already done so
- Preferably save it into somewhere in your files where you will be able to find it - DESKTOP NOT ALWAYS A GOOD IDEA
- navigate to this folder and list its contents
- try using autocomplete





ARGUMENTS
- I can run programms either with or without arguments

	- cd nelles
			^ this is an argument
	- no arguments: some sort of default
		- ls : lists the current dir, but you can specify e.g. ls data
		- cd : home dir
	
- More than one arguments
	- e.g. ls data molecules

- Special arguments that change the way the program behaves: FLAGS

	- ls -a  (list ALL)
	- ls -F  (identifies directories)
		 -r  (reverse order)
	- ls -l  prints more information
	
	Can combine more than one:
	- ls -lh displays suffixes (bytes, kilobytes, etc)

- mention MANPAGES
	or search the web - man pages not on all Windows installs
	http://explainshell.com/ - great resources, explains commands bit by bit



CHALLENGE
- Use man or search the web to list files in the shell-lesson directory ordered by filesize
- Tip: probably use ls followed by a flag

Solution: ls -lS





CREATING FILES

- create new directory: mkdir

mkdir firstdir

- new directories start empty

Need to use cd to move into it. Try autocomplete cd f TAB



Let's try looking at the sample files

cd into shell-lesson

Those are sample files from Project Gutenberg. But which is which?

Try cat 829-0.txt

WOOOOW

Cancel that by hitting CTRL-C (works to abort any command)

If we just want to read the first few lines, let's use head instead
(or tail for the end)

head 892-0.txt


Now we want to list another file. We can retype the command but we can also REUSE it
by using the arrow to recall an earlier command then edit it

head 829-0.txt 33504-0.txt

Yes, we can list both files.
We could continue on with the rest of the files, adding each filename. But what if we have a large number of them?

* wildcard

head *.txt


RENAME AND MOVE

- mv
	- rename
	- move

mv 829-0.txt gulliver.txt


CHALLENGE
1 - cp works like mv but creates a copy. How would you make a copy of gulliver.txt and call it gulliver-backup.txt ?

2 - rename the firstdir directory we created earlier and name it backup

3 - move the gulliver-backup.txt into the backup folder (using mv)





COPY

- cp

- how to copy a directory?
	- use -r
	
	



CHALLENGE
Try navigating your own filestructure. See if you can combine multiple steps. Use the tab.
You can use the following shortcuts:

. - this dir
.. - parent dir
/ - root

This is a bit like an URL. 

Are you running into any issues? If yes, why?
We'll talk this afternoon about how best to name files.




DELETING FILES

- rm
- NO TRASH CAN!!! - be careful

- rm only works on files

some examples using draft, recreate, try to delete entire thesis dir

- rmdir only works on empty directories

SAFETY NETS

- rm -r allows to delete recursively ---> DANGER





BREAK ?


LOOPS

Let's look at the sample directory again.
Imagine there were many more *.tsv files there. How would you create a duplicate of each of those files, say backup-nameoffile?

Can you do?
cp *.tsv backup-*.tsv ?

Why not?


Aside - echo

echo is used to output information

- echo "Have a lovely day everyone"

But that's not as useful as output the content of a variable or the result of a command.

What's a variable?
It's a piece of computer memory that can contain information.

- NAME= (your name)
- echo "$NAME is awesome "

Note that we're using the $ to tell echo not to treat NAME literally but as a reference to a variable of that name.
Similarly, we can tell echo to output the result of a command. To tell echo to run that command instead of printing their name,
we use $(  )

- echo $(pwd)

- echo "Today is the $(date)"


If we put a command inside $( ) echo will run it. But if we don't, it will still resolve wildcards, so we can use it to debug
our earlier issue


try using echo
That expands into
	cp basilisk.dat unicorn.dat backup-basilisk.dat backup-unicorn.dat
	-> error, cp doesn't know what to do with more than two files
	

Instead, we have to use loops.

For example, we want to display the first line of each .txt. Remember head?

$ for filename in *.txt
> do     <---------------- notice how the prompt changes? we're inside the for loop
>    head -1 $filename
> done

What happened here?

for

variable filename
recall variable $filename


What if I wanted to add the name of the file to the above loop?
I can add several lines inside the for loop

$ for filename in *.txt
> do
> echo $filename
> head -1 $filename
> done

Try to do an arrow up - for filename in *.txt; do head -1 $filename; done


CHALLENGES
- Now try to solve the initial problem

$ for filename in *.tsv
> do
> cp $filename backup-$filename
> done

- What would happen if we had a file with a space in its name?

It actually depends on the shell. Modern versions of bash escape spaces. If you want to make sure, use quotes.

cp "$filename" "backup-$filename"

- MEASURE TWICE, CUT ONCE - how could you test the result of your for loop?
	- use echo
	
$ for filename in *.tsv
> do
> echo cp $filename backup-$filename
> done

This is called debugging - good technique

DO YOU REALIZE YOU'VE JUST WRITTEN YOUR FIRST COMPUTER PROGRAM?




CHALLENGE
Write a program that outputs the first and last line of each text file in the current directory.



"Growing" a program - this is how we program.
Even experienced programmers can rarely think up a whole program and then write it.
Instead, they excell at cutting a problem into small chunks and solving them one after the other.

Start small, eg with easy tasks, small set of files, then add steps one at a time. 
Eg not sure your for loop is catching all the files you want? Start by just putting echo

Once you're confident your script works on a small subset of files, launch it on your real data.










NEAT STUFF
- history
- history | tail
- !123 to rerun command on line 123
- history | tail | colrm 1 7 > some-script.sh


RESOURCES
https://onceupon.github.io/Bash-Oneliner/

