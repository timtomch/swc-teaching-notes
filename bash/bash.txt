Updated 02-2021 with new lesson content

PREP - if online teaching
- Have a terminal window in present online mode open 
- Have a finder window ready
- add both too mmhmm if using
    - also add exercice images to mmhmm



If using tmux, see https://github.com/rgaiacs/swc-shell-split-window
    - Explain that their screen will look different - that's OK, I'm using this setup so they can see what were the last commands I typed
    
    In mouse mode, to copy text: hold the fn key when selecting (selects in pale green) - command-c will then work
    
    
While I introduce myself, if everyone can type echo $SHELL and plop the result in the chat/Discord



IF REQ'D - WHO I AM
INTRODUCE HELPERS
HOW STICKIES WORK
CONFIRM SCHEDULE
    - 3h
    - Couple of breaks

Have people download the test data folder https://swcarpentry.github.io/shell-novice/data/data-shell.zip

Question: using the terminal, who among you can navigate to your home directory and list the files it contains?
Handout: https://github.com/timtomch/swc-teaching-notes/raw/master/bash/linux_cheat_sheet.pdf




WHAT IS THE SHELL AND WHY IT IS IMPORTANT
- keyboard, mouse & graphical user interface (GUI) great way to interact with computer, very intuitive
- not great for repetitive stuff -> takes time, causes (human) errors

- CLI still very much used to do exactly that, tell computers to do stuff over and over again. 
- Example: imagine you have to copy the 3rd line on hundreds of files. Doing it by hand is tedious and could lead to errors. Also if you find out it was the 4th line you had to copy, you have to start over. Same if you have to start again in 6 months on a new set of files.
The commands we will learn today should provide ways to do this.
	-> repetitive
	-> reproducible

	---> PROGRAM

The other advantage of knowing how to use a command-line interface is controlling remote computers. If you ever have to run a very large program that has to run on dedicated machines, this is typically used.


In both cases, we are giving instructions to the computer
- through mouse clicks on menus etc.
- through text


- a "shell" is a computer programm that interprets what we type, tells the computer what to do in computer-speak, then prints the result of the action:
R ead
E xecute
P print
L oop

- there are different shells, although they share a large set of commands. The most common nowadays is bash.
- technically, newer Macs now use tcsh but most of what we're doing today should still apply.
- most Linux distros do too
 	how to be sure? type echo $SHELL

- the command prompt in Windows is also a shell, although it doesn't share the same command base as most UNIX shells
	to get a proper shell in Windows, use a 3rd-party like git-bash (comes with git)
	
	
	
HOW TO USE A SHELL
- shell prompt ($ in bash)
- we type in commands
	- e.g. ls

	- what the shell does is
		- it finds the ls program
		- runs it
		- prints its output (in this case a list of files at the current location)
		- displays a new prompt -> we can type new stuff


- files are organised in folders on your computer (or at least they should be)
- we can navigate those folders using Windows Explorer or the Finder
	- SHOW example to sample data

- now if I want to act on those files, I need to open the folder they're in in the Finder
    - eg rename files
- if I want to act on them using CLI, I also need to navigate to that folder


We'll start our lesson by learning some commands to move around in our files and do simple operations on them.


In the GUI, there are some cues where we are located. How about in the shell?
Let's start by figuring out where we are 

pwd - PRINT WORKING DIRECTORY

- prints the whole path, from the root of the filesystem
- on a Mac, it's often something like /User/yourname/Documents etc.
- slashes separate folders and subfolders
- first slash tells it's the root

EXPLAIN using the Finder
- Macintosh HD is the root
- Navigate to Users/thomas


- LS to list what's in a directory
	- filename conventions
	- extensions (can be hidden in the Finder but should always be here)
	- spaces and accented characters are bad news (but there are ways to get around)


- CD to CHANGE DIRECTORY


- Examples use of CD to navigate up and down, relative vs absolute paths
- cd .. to go "up"
- cd to home dir
- cd / to root
- pwd to see where you are


AUTOCOMPLETE & HISTORY
- very useful trick, use the tab key to autocomplete!!
- up arrow: history
- CTRL-A and CTRL-E to jump to start and end of line in the shell



** CHALLENGE ****************************************************
- Please download the data-shell directory if not already done so
- Preferably save it into somewhere in your files where you will be able to find it - DESKTOP NOT ALWAYS A GOOD IDEA but for today is fine
- navigate to this folder and list its contents
- try using autocomplete
should be
creatures               north-pacific-gyre      solar.pdf
data                    notes.txt               writing
molecules               pizza.cfg
*****************************************************************




ARGUMENTS
- I can run programms either with or without arguments

	- cd data-shell
			^ this is an argument
	- no arguments: some sort of default
		- ls : lists the current dir, but you can specify e.g. ls data
		- cd : home dir
	
- More than one arguments
	- e.g. ls data molecules

- Special arguments that change the way the program behaves: FLAGS

	- ls -a (list ALL)
	- ls -F (identifies directories)
		 -r (reverse order)
         -G colorizes output
    They can be combined: ls -lhG
         
    Watch out: capitalization is important
        -s displays the size
        -S sorts by size
    
    Also watch for spaces
    

- ways to get help 
    
    MANPAGES: eg man ls
        Sadly this won't work for Windows
    GitBash has --help
        ls --help will work on Windows, not Mac


	or search the web - man pages not on all Windows installs
	http://explainshell.com/ - great resources, explains commands bit by bit




** CHALLENGE ****************************************************
- List the files in the data-shell folder ordered by size in reverse order (smallest first)
    Use man ls or ls --help to see list of options
    hint: ls -S to list by size
    ls -r to reverse order
should be
total 64
-rw-r--r--@  1 thomas  staff     32  8 Aug  2019 pizza.cfg
-rw-r--r--@  1 thomas  staff     86  8 Aug  2019 notes.txt
drwxr-xr-x@  3 thomas  staff     96  8 Aug  2019 north-pacific-gyre
drwxr-xr-x@  5 thomas  staff    160  8 Aug  2019 creatures
drwxr-xr-x@  6 thomas  staff    192  8 Aug  2019 writing
drwxr-xr-x@  8 thomas  staff    256  8 Aug  2019 molecules
drwxr-xr-x@ 11 thomas  staff    352  8 Aug  2019 data
-rw-r--r--@  1 thomas  staff  21583  8 Aug  2019 solar.pdf
*****************************************************************




ASK if navigation clear, or if they want one more exercice?
If so, use path-exercice-1.png 






CREATING FILES

- create new directory: mkdir

mkdir thesis

- new directories start empty

- create a new text file - using a TEXT EDITOR

nano draft.txt

---> WHAT'S GOING ON HERE?
	- interactive mode
	- we're in an editor
	- nano is a bare bones text editor
	- you can type your thesis in nano
	- in practice, better to use a good one
	- nano always there, can be used for small changes
	
	- can't use the mouse
	- arrow keys
	
	- Bottom row: list of possible actions. ^ means CONTROL KEY
	
	Write some text, then CTRL-O, confirm filename then CTLR-X to exit.
	
check that the file is there using ls


Aparte on file names
    - Try to avoid spaces or special characters if you plan to interact with your files using CLI or code
    - Use filename extensions for clarity




RENAME AND MOVE

- mv
	- rename

        mv thesis/draft.txt thesis/quotes.txt


	- move

        mv thesis/quotes.txt .





COPY

- cp

    cp quotes.txt thesis/quotations.txt


- how to copy a directory?
	- use -r
	
        cp -r thesis thesis_backup
    
    
	WHAT'S THE DIFFERENCE OF
	- cp -r data/ thesis       <--- copies *the contents* of the data folder
	and
	- cp -r data thesis        <--- copies the data folder
	
	I like to write
	- cp -r data thesis/.
	WHY?
	

. - this dir
.. - parent dir
/ - root



* wildcard




DELETING FILES

- rm
- NO TRASH CAN!!! - be careful

- rm only works on files

some examples using draft, recreate, try to delete entire thesis dir

- rmdir only works on empty directories

SAFETY NETS

- rm -r allows to delete recursively ---> DANGER

- rm -i     <--- interactive mode - useful when you're not sure, will ask before each action.




** CHALLENGE *************************************************
- move the molecules folder inside data
- create a folder called backup 
- create a subdirectory with today's date under backup
- copy the contents of the data folder there
**************************************************************





BREAK ?






PIPES

So far we have learned how to interact with files using the shell. Let's move on to more powerful things.


Let's switch to the molecules folder

- ls
- less cubane.pdb
- wc -> word count (lines, words, characters)
	- wc cubane.pdb
	- HOW do I get the word count of all files in this directory?
		- wildcard
		- what does wc *.pdb mean?
	- wc -l -> only lines

- save into a file
    - wc -l *.pdb > lengths.txt

    
	- does it matter if the file lengths.txt already exists or not?
		- create file
		- overwrites it (!)
        
        If you want to append instead of overwriting, use >>
        
        
- cat lengths.txt  vs less lengths.txt




- sort -n lengths.txt
	- n -> numerical sort instead of alphabetic

- save this into a file
- sort -n lengths.txt > sorted-lengths.txt


- how would I get shortest molecule?
- get first line of that file
	- head -1 sorted-lengths.txt (-1 just first line)
	
    
    
Do we need to create files for every step?
We can use pipes instead

- sort -n lengths | head -1

- wc -l *.pdb | sort -n | head -1



Show redirects and pipes graph to clarify.






Explanation of standard in stdin and standard out stdout

RECAP/GENERALLY
- small pieces
- joined by pipes
- good way to "grow" a program





* CHALLENGES ********************************************************
I've shown you how to get the shortest molecule. How would you go about to get the longest?
- two options:
	- tail instead of head
	- sort -r -> problem, it gives the total as well. How do we solve that?
	- add a step in the pipe
		wc -l *.pdb | sort -r | head -2 | tail -1
		doesn't make a lot of sense
		but say that I wanted the 3rd largest ?
			wc -l *.pdb | sort | tail -4 | head -1

What if I want to remove the name of the file and only get the word count?
- use tr & cut
e.g. wc -l *.pdb | sort | tr -s ' ' | cut -d ' ' -f2

                           ^- trim         ^- cut with delimiter
***********************************************************************


What if instead of the number of lines I was interested in the number of bytes in every molecule file?
- hint: use man wc
- wc -c ...


 (( BREAK ))



LOOPS


Let's change into the creatures directory
We'd like to print out the classification (second line) for each species.

Let's do it on one file

    head -n 2 basilisk.dat | tail -n 1


$ for filename in basilisk.dat unicorn.dat minautor.dat
> do     <---------------- notice how the prompt changes? we're inside the for loop
>    head -n 2 $filename | tail -n 1
> done

What's happening here?

for

variable filename
recall variable $filename


What if I wanted to add the name of the file to the above loop?
I can add several lines inside the for loop

$ for filename in *.dat
> do
> echo $filename
> head -n 2 $filename | tail -n 1
> done

Try to do an arrow up - for filename in *.dat; do head -3 $filename; done


Explain *.dat
     it expands into basilisk.dat unicorn.dat minautor.dat
     Can use echo to find out




* CHALLENGE **************************************

I'd like to create a backup copy of each creature file.

If I try
    cp *.dat backup-*.dat
    it won't work
    (use echo to demonstrate)

So I have to use a for loop instead. Can you find out what it is?

$ for filename in *.dat
> do
> cp $filename backup-$filename
> done

****************************************************



- What would happen if we had a file with a space in its name?

It actually depends on the shell. Modern versions of bash escape spaces. If you want to make sure, use quotes.

cp "$filename" "backup-$filename"

- MEASURE TWICE, CUT ONCE - how could you test the result of your for loop?
	- use echo
	
$ for filename in *.dat
> do
> echo cp $filename backup-$filename
> done


Other challenges if time allows on lesson material.

Check if everyone understands for loop - use schema in slide if necessary.









SHELL SCRIPTS
- objective: we don't want to be typing that whole thing again next time
- make it into a shell script


OK, so let's start by cleaning up our mess
- rm backup-*

WARNING!
If you're not sure, remeber the echo trick
or use -i when using rm (interactive, asks for confirmation)



Let's go back to the molecules folder

Refresh our memories about content
less octane.pdb

Say I'm interested in getting only lines 11-15 of a file. Going back to pipes:

head -n 15 octane.pdb | tail -n 5


Hurray. And then what if I want to run it on another molecule?
I replace the filename.

What if I want to do that again in three months and the pipe is no longer in the history?
I create a shell script


Create shell script using nano
	-> a-parte on text editors

nano middle.sh

    echo "yeah!"


    bash middle.sh  <- we tell bash to run this script


Then we can try
head -n 15 octane.pdb | tail -n 5


OK, so what do I do now if I want to run it on another molecule?

Remember variables?
There are special variables that give us arguments passed when running a script

head -n 15 "$1" | tail -n 5

$1 -> first argument
$2 -> second argument
etc.

I'm putting it in " " so that it would work even if there are spaces in the filename

Let's try to run it on two different files. Yeah!



We can now make our little script take even more parameters:

head -n "$2" "$1" | tail -n "$3"



Are we happy with our script? Is that your first computer program? Good job!

Now imagine someone else has to use your script in a few years. Or it can be you in a few years. How do you determine how it works?

ADD COMMENTS!

# Select lines from the middle of a file.               <-- add some comments so you remember later what this is doing
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"



NEAT TRICK
Use history to save your workin into a shell script!


    history | tail -n 5 > redo-figure-3.sh



* CHALLENGE ***********************************************************************
Write a script that takes two arguments
- the name of a directory
- a file extension
and outputs the longest file (the one with the most lines) in that directory with that extension.


wc -l $1*$2 | sort | tail -2 | head -1
***********************************************************************************








GREP and FIND

- cd writing
- less haiku.txt

Find the lines that contain "not"
- grep "not" haiku.txt
not necessary to put quotes

    APARTE: grep is contraction of global/regular expression/print - sequence of operations to do the same thing
        Came to be shorthand for searching (like "to google" for searching the web) - so the find program is named like this
        
        
- grep The haiku.txt
also returns Thesis

-w to restrict matches to word boundaries (including start and end of line, not just spaces):

    grep -w The haiku.txt
    
Use " " to look for phrases:

    grep -w "is not" haiku.txt

-n prints line numbers


-i case insensitive
-v inverts

-r recursive, eg inside a directory:

    grep -r Yesterday .
    




Pattern is in form of REGULAR EXPRESSIONS   <-- very powerful, also rather complex

G lobal
R egular
E xpression
P rint


Old joke: You have a problem that you want to solve with regular expressions. You now have two problems.



Simple examples
o as second character
grep '^.o' haiku.txt 

g as last character
grep 'g$' haiku.txt

second word is "it"
grep -E '^(.)* it' haiku.txt

-E and quotes prevents bash from treating * as wildcard





GREP finds stuff inside files
FIND finds files


find works recursively through directories
you specfiy where to start and what to look for
e.g.

find . -type d

	 start in current dir (.)
	 find -type d directories
     
     consider piping to less if too long a list:
         find . | less

find . -type f to look for files

-maxdepth
-mindepth

find . -name haiku.txt

What if I try to look for all .txt files
find . -name *.txt

What happens?
Remember, bash expands * before running command
Instead
find . -name '*.txt'

What if we're interested in the lenght of all those files?

can we do?
find . -name '*.txt' | wc -l
no, because find returns a list of files separated by newline, wc acts on that list...

instead, do
wc -l $(find . -name '*.txt')

whatever is in $() gets executed first


* Capstone CHALLENGE **************************************************
data-shell/writing/data/LittleWomen.txt has full text of the Little Women novel

Write a script that counts how many time each of the characters is mentioned?
Jo
Meg
Beth
Amy

Hint:
    - use grep
    - use a for loop
    - there are several ways to solve this
    
*************************************************************************

Solution:

for sis in Jo Meg Beth Amy
do
	echo $sis:
	grep -ow $sis LittleWomen.txt | wc -l
done




NEAT STUFF
- history
- history | tail
- !123 to rerun command on line 123
- history | tail | colrm 1 7 > some-script.sh

