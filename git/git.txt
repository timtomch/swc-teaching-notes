GIT

Intro into SWC if necessary
Introduce instructors & helpers
Give timeline, link to workshop page

Check Unix knowledge.
- Is everyone able to navigate to a particular folder using the command line and list the contents of this directory?
- When you are in a command line window, how do you know where in your files hierarchy you are?

Good handout: https://training.github.com/downloads/github-git-cheat-sheet/
              https://training.github.com/downloads/github-git-cheat-sheet.pdf

WHY use version control? PHDcomics image: http://phdcomics.com/comics/archive_print.php?comicid=1531     [[ SLIDE ]]

Who uses "undo" in their editor? undo = simplest form of version control.

Single user
- nothing is lost, can get back to earlier stage - e.g. useful to get back to previously working version of code.
- what version of code was used on day x to generate those results?
- sync multiple copies over different machines
- ability to "branch" - try out something, then decide if you want to incorporate it into your project (merge)

Multiple users
- share latest version on a server - YOU decide on which version you want to work. Possible to work on a particular version while others work on other version, then merge.
- record of who made what change when: As we have this record of who made what changes when, we know who to ask if we have questions later on, and, if needed, revert to a previous version, much like the “undo” feature in an editor.
- conflict resolution: When several people collaborate in the same project, it’s possible to accidentally overlook or overwrite someone’s changes. The version control system automatically notifies users whenever there’s a conflict between one person’s work and another’s.


- mostly used for coding, but not only. Works with every kind of file, although things like file comparison works better with TEXT. LaTeX other good example. Data (small sets), etc.
EVERYTHING THAT CHANGES OVER TIME or NEEDS TO BE SHARED.


FEATURES
- changes are saved sequentially                                     [[ SLIDE ]]
	- start with a basic version of document
	- record changes you make each step of the way
	- like a recording of your progress
	- YOU DECIDE WHEN to save
- forking: different versions can be saved separately                
- merging: different versions can be merged - conflict resolution    

TERMINOLOGY
- COMMIT 
	-> Each record of changes is called a COMMIT
	-> user decides what changes make next version. NOT AUTOMATED
- REPOSITORY
	-> complete history of commits for particular project


On its own, DOES NOT REPLACE BACKUP

It doesn’t require a server, unless sync and share are desired. Free GitHub provides server, no need to set one up. Community. Features for collaborative projects. Sharing.

Today we're using the command-line version of git, to make sure we understand what the process behind it is.
After that, there are many ways to use it daily. I use the GitHub client, there are other graphical tools. Or you can continue using the command-line. When working on a server, I rhave to use the command line, so it's good that I have learned to use it.


0 - Tech check

Can everyone type $ git --version?





1 - SETTING UP
Objectives:	- Configure git for the first time on a computer
		    - Create a new repository


All git commands are written like     git verb options


$ git config --global user.name “Thomas Guignard”
$ git config --global user.email “tom”@timtom.ch”   <- email will link to GitHub - use the same you've used to sign up with GitHub
													   Note that your email is stored for each commit and can be read by anyone.
													   GitHub provides a way to keep your actual email address private, if preferred:
                                                       username@users.noreply.github.com
													   
													   
Line endings are different on Windows - might cause issues when collaborating with people on different systems.
We recommend doing

macOS & Linux:
$ git config --global core.autocrlf input

Windows:													   
$ git config --global core.autocrlf true

													   
													   
Config your favourite editor:
(see http://swcarpentry.github.io/git-novice/02-setup/index.html for other examples)								   
													   
$ git config --global color.ui "auto"
$ git config --global core.editor "nano -w"  <-- -w: disables word-wrapping

Explain what each of these are doing.
--global flag --> for every project on this computer. Also possible to have different settings for each directory (--local flag), etc. Type git config to get list of possible arguments.



Change the outdated practice of calling the default branch "master". This is the default now for GitHub, GitLab, etc. but git
hasn't yet made it the default practice.

git config --global init.defaultBranch main


--> DOES ANYONE HAVE A VERSION OLDER THAN 2.28 WHEN TYPING
git --version
?

If so, you will need to manually change the branch name in the repository




Check

$ git config -l
or
$ git config --list


If you're unsure about how to use a command, use the -h flag, e.g.

$ git config -h




Create a repository

We’re going to start a project about planets.


Start by cd into the place where you want to work. I have a folder for SWC workshops, but if you want you can put it on your desktop.

$ mkdir planets
$ cd planets

planets is going to be the root dir of our project. Let’s make it into a REPOSITORY

Make sure you are inside the repository! pwd if unsure

$ git init

See what’s been added with

$ ls -a

.git subdirectory contains everything git. Deleting it deletes all git data for that repo. Makes it easy to copy, replace, etc. or revert to simple directory.

Also note that git will include all subdirectories in the planet directory IF THEY HAVE FILES IN THEM. Empty dirs will be ignored.
No need to make them into repositories.


    IF ANYONE HAS AN OLDER VERSION OF GIT, MANUALLY CHANGE BRANCH NAME TO main
    git checkout -b main


Check status:
$ git status





16:00


2 - TRACKING CHANGES
Objectives:	- Go through modify-add-commit cycle for files
		    - Explain commit workflow. Where is information stored.
            - Distinguish between descriptive and non-descriptive commit messages.


Let’s create a file inside our repository:

$ nano mars.txt

-> I'm using nano as my editor here, so you can see what I'm doing by staying in the command line window, but if you prefer, you can use another editor.
   Also, it does not need to be the one we setup for git earlier.


Write some text

$ ls

What the status now?
$ git status

--> untracked file.

$ git add mars.txt  -> add to staging area
$ git status

--> new file

Now git knows it’s supposed to keep track of mars.txt but HASN’T RECORDED CHANGES YET.

$ git commit -m "Start notes on Mars"

--> messages are REQUIRED. If omitted, editor will be launched.

    What are good commit messages?
    They should complete the sentence "if applied, this commit will..."
    
    Message start with a REQUIRED brief statement (< 50 chars)
    Optionally, can be followed by a longer message if needed. Add a blank line between the brief message and the longer one.


Note unique idenfier.

$ git status

--> all is up to date

To get list of what we did so far:
$ git log

Now edit mars.txt some more.

$ git status

--> Git tells us there are changes but warns that nothing will happen. Messages usually helpful.

$ git diff
to get summary of changes

	-> Note the ids of the two versions being compared
	-> File names (here it's the same, but we could have changed the file name)



So now if I do
$ git commit -m “More notes on Mars.”

QQQ - 	All is set, right?
	How can I check?
	$ git status
	What’s wrong?
	How do I fix this?

	$git add mars.txt
		first

Why does git insist we add files manually all the time? We have complete control. We decide what to keep track? E.g. we don’t want to keep track of some doodles in another document.

We can use
$ git commit -a
To add AND commit at the same time.

Up to you.

STAGING AREA -> use git add to put stuff in the staging area - equiv. who goes on a group picture     [[ SLIDE ]]
COMMIT 	     -> use git commit to actually take a snapshot   - equiv. taking the picture
COMMIT -A    -> take snapshot of everything		             - equiv. take picture with everyone in the room


To illustrate differences
Use git diff
	- before staging
	- after staging
		Nothing because checks for differences between directory and what’s been asked to saved
		$ git diff --staged
			to check
	- after committing


$ git add mars.txt
$ git commit -m “More changes”

$ git log
You can page through the log using the spacebar. Hit q to exit.



Note that git doesn't track repositories unless there are files in them:
$ mkdir spaceships
$ git status
$ git add spaceships
$ git status

--> git status is still saying that everything is fine, because there are no files in that directory.

Let's add some files
$ touch spaceships/apollo-11 spaceships/sputnik-1

$ git status
Now we're talking

Note that you can git add a whole directory without listing each file:
$ git add spaceships
$ git status

$ git commit -m "Started thinking about spaceships"



ACTIVITY  **************************************************************************

Q1 - Which commit                                                        [[ SLIDE ]]

  Would only create a commit if files have already been staged.
  Would try to create a new repository.
  Is correct: first add the file to the staging area, then commit.
  Would try to commit a file “my recent changes” with the message myfile.txt.
  


Q2 - Work on several files                                               
	Make some more changes to Mars
	Add a file on Venus and start editing
	
	Then add both to the staging area and commit.
	
	Remember that git status can be quite helpful

************************************************************************************

16:30


3 - WORKING WITH HISTORY
Objectives:	- Use those commit numbers we’ve seen
		    - Compare various versions
		    - Restore old versions


Remember commit numbers?
$ git log

How can we see difference between current version of mars.txt and a previous one?

$ git diff f22b25e mars.txt
--> we can use whole 40 character hash but super annoying. So we can use first characters too. Enough so that it is unique.

Or get all differences if we have multiple files
$ git diff f22b25e


Annoying to type identifier. If we want to check the LATEST commit we can use HEAD~1 instead:
$ git diff HEAD~1 mars.txt

HEAD points to current commit. HEAD~1 is “head minus one”. HEAD~2 is “head minus two” etc.


To get more details:
$ git show HEAD~2 mars.txt



So to compare the last two changes we can use
$ git diff HEAD~1 HEAD~2


OK so now we can see changes. How can we revert.

Say we make a mistake and overwrite one of our files:
$ nano mars.txt
	Replace current text.

If I use
$ git status

It tells us the file has been changed, but changes have not been staged yet.

To put things back how they were at last commit:
$ git checkout HEAD mars.txt

We can use commit identifiers instead of HEAD to go even further back.

$ git checkout f22b25e mars.txt


If you use checkout <older version> wihtout a file name, you will end up in "DETACHED HEAD" state
	--> "look don't touch situation"
		This brings entire repository back to older situation. Git thinks it's extreme, so it suggests creating a branch if you want to do this.
		
	git checkout main brings everything back to latest stable situation
	

Why checkout? Imagine git as a checkout window  [[ SLIDE ]]


WARNING - we must use identifier of state BEFORE we made the change we’re trying to undo.

git status gives hints:

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)


(check for time - we want to keep enough time after the break for GitHub - at least 1h30)

ACTIVITY  **************************************************************************

Q3 - Reverting changes   [[ SLIDE ]]

  
  	Both 2 and 4 will work
	3 wants to revert changes before HEAD (so 2 steps back instead of 1)
	1 is dangerous as it will bring her entire repo back to where it was when she last commited.
		--> it's the detached HEAD state we saw before


Q4 - Understand history  [[ SLIDE ]]

	Solution is 2. Because the second change was made after git add.
	Git checkout replaces the current version of the file with that commited one.

************************************************************************************



17:00


4 - IGNORING THINGS
OBJECTIVES	- Configure git to ignore specific files
		    - Why ignore files?

Your project will typically contain code AND data. Eg. results of your code. You typically don’t want to keep that -> waste of disk space (want to keep a copy every time you run your code??)

Let’s create some dummy results:
$ mkdir results
$ touch a.dat b.dat c.dat results/a.out results/b.out

$ git status

We can see all those new files. Other danger of keeping track of results files. Say you have large list of data files. Easy to overlook some other more important changes in git status.
So good practice not to keep track of them.



We can specify what stuff git should ignore by using special file:
$ nano .gitignore

In it, every line is something that needs to be ignored.
- Can be file names
- Or directories (trailing slash)
- Or patterns, e.g. *.dat

So let's put
*dat
results/

in it.


Now, let’s try again
$ git status

Cleaner. Note that, of course, git notifies us that there is a new file.

QQQ	- What shall we do?
	- Ignore it? How can we do it?
		- add .gitignore to .gitignore
	- Good idea? Why?
		Not necessarily. Usually a good thing to keep track of .gitignore.
		Useful when creating new copies of repository. Or when collaborating.

So:
$ git add .gitignore
$ git commit -m "Add the ignore file"
$ git status

.gitignore will prevent us from adding files we don’t want to track:
$ git add a.dat

-> we get a warning

We can still force git to override .gitignore:
$ git add -f

Or see status of ignored files:
$ git status --ignored



What if there's a .dat file that I still want to track?
Can use ! to negate previous rules, e.g.

*dat
results/
!overriden.dat



ACTIVITY  **************************************************************************

Q5 - Nested files   [[ SLIDE ]]

	1 - Ignore everything in results except results/data
	
		results/*               # ignore everything in results folder
		!results/data/          # do not ignore results/data/ contents

	2 - Ignore all .dat files (and only them) in the results/data/position/gps folder
	
		results/data/position/gps/*.dat

************************************************************************************

(there are plenty of other exercises on the online lesson)



(( BREAK ))
During the break, ask that people who don't yet have a GitHub account create one.

During the break, ask workshop host to pair attendees into groups of 2-3
Record result on the Etherpad




5 - Adding a remote repo / GitHub
OBJECTIVES:	- What’s a remote repo? Why is it useful?
		    - Clone remote repo
		    - Push and Pull

How can we collaborate with others on repo? We could technically email each other files and add them to our own repos, etc. Much easier to have a central copy, keep it on the web, and sync with it. Useful for 1 person (backup, multiple computers, sharing) or for a team (collaboration).

Several services exist. You can even setup your own server. We will use GitHub here.

Git is not GitHub. Git is software, GitHub is a service, a company.

- Login to GitHub
- Create new repo
- Name repo --> CAN BE A DIFFERENT NAME than local
  BUT needs to be empty because we're going to link it to existing local repo so UNCHECK "initialize with README and license"

Now we have an empty repo on GitHub. Same situation as if we did
	$ mkdir planets
	$ cd planets
	$ git init
		on GitHub server.



QQQ - Which of the options displayed by GitHub after creation do you think is the right one?

To connect the two repositories:

$ git remote add origin https://github.com/timtomch/planets.git

You can use the box on top to easily copy this string
--> Careful to switch from SSH to HTTPS
		SSH more secure but requires some more config.
        It's a good thing to use SSH going forward, not enough time to go through it now, but check
        the lesson for a good step by step guide:
        https://swcarpentry.github.io/git-novice/07-github/index.html


Check:
$ git remote -v

‘origin’ is a nickname for your remote repo. Can use another, but this is most common. Can have multiple (useful when dealing with local forks).



We haven’t uploaded any files yet. To put the local changes on server: PUSH

$ git push origin main 
		           ^-- this is the name of the branch. We’ll get to that.

	Most systems now use password managers. 
	Should have recognised your email address and password. 
	Otherwise will ask password. Can be unset:
	$ unset SSH_ASKPASS



ACTIVITY  **************************************************************************

Push your local repo to GitHub

  	- Create GitHub account.
	- Create repository there.
	- Push your local data there
	- Look at results on GitHub
		- Can you see commit number?
		- How many commits? More than one? Why?
		- Notice timestamps?


What's the difference between git commit and git push?

	- commit is local
	- push, we push the local commits to remote



************************************************************************************




What if I want to get data from remote to local, e.g. I’m syncing with work done by my team in the morning:
$ git pull origin main

In this case, nothing changes because up to date.







6 - COLLABORATING (if enough time)
OBJECTIVES:	- Collaborate by pushing to a common repository.

This part is interactive.

Get into groups. Add your GitHub user name in the Etherpad

Steps
- Add your team mates to your "planets" repository as collaborators

- CLONE your team mate's repo (demonstrate how to do that)

	$ git clone https://github.com/vlad/planets.git (copy the repo URL from GitHub) ~/Desktop/vlad-planets
	
- Make changes to their repo
- Commit them
- Push your changes


Q: Now that someone else made a change to your repo, how can you update your local copy?
	$ git pull origin main
Q: How can you get info about what edits your team mate made?
	Check the commit history (git log  -  git diff  or on GitHub)
	You can also add comments on GitHub



Advanced - Forking and pull-requests
If enough time, have people try forking each other's repos, making changes and issuing pull-requests.



ALTERNATIVE - Without participants collaborating 

	We’re going to use two different versions of same repo as example.
	Same user, different copies. Case of syncing between computers.
	Works the same if there were two different people.

	CLONING a repo
	 = creating a local copy of a remote

	- Open another terminal window
	- Create new directory and cd to it
	- Look for clone URL on GitHub
	$ git clone https://github.com/vlad/planets.git

	Let’s make some changes in that copy

	$ cd planets
	$ nano pluto.txt

	$ git add pluto.txt
	$ git commit -m "Some notes about Pluto"

	$ git status

	Oh, and do we need to setup the remote?
	$ git remote -v
	-> already there! Taking over info when cloning, creating “origin” by default.

	$ git push origin master

	QQQ	- Which version is now the latest on the server?
		- On the right terminal? (other collaborator)
		- How do I get the new version on the right terminal?


			$ git pull origin master



7 - RESOLVING CONFLICTS
OBJECTIVES:	- What are conflicts? When do they occur?
		    - How to resolve conflicts. MERGE


Can someone volunteer to add me as a collaborator to their own repo?
(or ask a helper)


- Clone attendee's repo

- Make some changes in mars.txt

While I'm doing this, can you make some changes on your end, and then push?

- Try to commit and push



ALTERNATIVE - Without participants collaborating 

	Previous example no conflict since 2nd collaborator created new file that wasn’t there in previous copy.

	Let’s make a conflict by editing the mars.txt file

	$ nano mars.txt
	Make some changes.

	Display mars.txt in both terminals to show difference.

	Then push to GitHub:
	$ git add mars.txt
	$ git commit -m "Adding a line in LEFT copy”
	$ git push origin master


	Now let’s have the other partner make a change AT THE SAME TIME (without first pulling)


	$ nano mars.txt
	Make some changes.

	Display mars.txt in both terminals to show difference.

	Then push to GitHub:
	$ git add mars.txt
	$ git commit -m "Adding a line in RIGHT copy”
	$ git push origin master




UH OH
What’s happening?
Git detects conflict. Not letting us overwrite previous version on server.

What we have to do is pull the changes from GitHub, MERGE and then push:

$ git pull origin main

Git warns us that there is a conflict. See what it has done to mars.txt:

$ nano mars.txt

Look for the special markers. It’s up to us to remove markers and fix changes.


$ git add mars.txt
$ git status

-> Git says conflicts are resolved but still need to MERGE.

$ git commit -m "Merging changes from GitHub"
$ git push origin main

Try doing 
$ git pull origin main
from other terminal window  // or ask other attendees to do it


	Also possible to discard either version:
	$ git checkout --ours file.txt
	$ git checkout --theirs file.txt




8 - EXTRAS

- Version control and GitHub as TOOLS FOR OPEN SCIENCE
	- Get feedback on code and data during research
	- Documents work, can resolve paternity issues (who did which step)
	- Other scientists can use same work
		(esp if paper also published in Open Access)
	- Others can check if results are reproducible
	- Code can be cited. GitHub can create DOIs for code when connecting a "release" to Zenodo, see https://guides.github.com/activities/citable-code/.
	- Data can be shared in repository such as figshare or Zenodo, and also get a DOI
	- Studies show, the more open work is, the more widely it is cited and reused.
	- See more on http://swcarpentry.github.io/git-novice/10-open/index.html


- Good practices for sharing code
	- Include good README file
		Displayed prominently on GitHub
	- Add licensing and citation information to a project
		Include LICENSE file
		Include CITATION file
	- Choose proper license
		Code qualifies as intellectual property. 
		Shared code does not waive copyright protection.
		If no clear license, ppl who want to reuse don’t know what
			they can do. Could be illegal.
		Examples include
			- GNU General Public License GPL
				“infective”: any variation MUST be open as well
			- MIT
			- BSD
	- Licenses created for software are usually not usable for other stuff
		- Data. E.g. CC0 for public domain waiver
		- Creative works. Look at Creative Commons, eg. CC-BY and CC-BY-SA
	- Software Carpentry uses CC-BY for lessons and MIT for code.
	- REMEMBER: making data/code open does not mean waiving copyright. You still
	  own your stuff, you are still its creator. You just grant users the right
	  to use it in a certain way.
	- Hosting on public GitHub might not be a good idea depending on your research
		CHECK WITH INSTITUTION


- GUI tools. Show GitHub for Mac
	- List of repositories
	- Checkboxes --> staging
	- Commit and Sync at the same time
	- Editor shows changes
	- History tab --> equiv. git status

	To be used with GitHub (not really for local only)
	Can be used to create forks, branches, and pull requests
	
	Integrates also with TextMate
	
	And RStudio


- Mention branches

