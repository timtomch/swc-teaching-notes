Prep
- download db file - http://bit.ly/swclibdb
- make sure sqlite3 started
- .schema
- stickies

Database introduction
- like spreadsheets
- more efficient with large amounts of money
- built to be accessed by multiple clients (collaborative editing)
- form relationships -> RELATIONAL DATABASE

SQL
- language, not software
- STRUCTURED QUERY LANGUAGE -> database queries
- spoken by many database managers ('dialects')
	- MySQL
	- Oracle
	- MS Access
	- SQLite
		- we're using it today because simple installation and packed with python
- usually not interact directly with dbs, today is about showing how they work internally
- data librarians interact with usually come from SQL dbs, e.g. circulation data. Multiple tables. Can do more powerful queries if SQL is known.
- important to know this to properly structure databases
	- usually think about structure first, then put data
	- changing structure after the fact is not trivial (but possible), not like adding a column in excel
- functions in programming languages that abstract dbs
- in Access, query builder actually writes SQL in the background, can be edited, some queries can only be done this way
- SQL very powerful, can describe entire db structure and data
	- example survey.sql
	- easy migration
	- human-readable, can be reverse-engineered


Introduce example
- test data, short tables
- TABLES
- ROWS/RECORDS
- COLUMNS/FIELDS

Sqlite setup
- .mode column
- .headers on


SELECT
- SELECT family FROM Authors;
separate using comma
- SELECT family, personal FROM Authors;

wildcard:
- SELECT * FROM Authors;

- case-insensitivity

- Short challenge: Write a query that selects only titles from the Works table.


SELECT DISTINCT
- SELECT Publisher from Works;

to remove duplicates
- SELECT DISTINCT Publisher from Works;
If we select a pair, the distinct pairs are returned
- SELECT DISTINCT Place, Publisher FROM Works;

(two different O'Reilly)


ORDER BY
- SELECT * FROM Works ORDER BY publisher ASC;
- ignore NULL from the time being
- ASC default
- SELECT * FROM Authors ORDER BY birth DESC;
can specify multiple ORDER BY clauses
- SELECT * FROM Authors ORDER BY family ASC, birth DESC;

- challenge: Write a query that displays the full names of authors, ordered by family name.




WHERE
- limit output
- SELECT * FROM Works WHERE Publisher="Wiley";

Do not have to filter by displayed fields. DB manager filters first, then displays
- SELECT Title FROM Works WHERE Publisher="Wiley";

Boolean ops:
- SELECT * FROM Works WHERE (Publisher='Wiley') AND (Date>='2011');

- SELECT * FROM Works WHERE Publisher='Wiley' OR Publisher='O''Reilly';

- SELECT * FROM Works WHERE Publisher IN('Wiley','O''Reilly');
- combination possible, don't forget precedence

Not equal:
- SELECT * FROM Works WHERE Publisher !='Wiley';

Fuzzy logic, specially useful for text
- SELECT Publisher FROM Works WHERE Publisher LIKE "%y";
Negation:
- SELECT Publisher FROM Works WHERE Publisher NOT LIKE "%il%";

Remember how to avoid duplicates?
- SELECT DISTINCT Publisher FROM Works WHERE Publisher LIKE "%il%";

CHALLENGE
Write a query that lists all books in the database that have the word "SQL" in their title and that have been published after 2010.

	SELECT * FROM Works WHERE Title LIKE "%SQL%" AND Date>2010;

Now order that list by Date, in descending order.

	SELECT * FROM Works WHERE Title LIKE "%SQL%" AND Date>2010 ORDER BY Date DESC;




NULL

OK let's list the page numbers again:

- SELECT Title, Pages from Works;

Holes -> NULL values.

- How many lines in Works?
- SELECT * FROM Works;
We can use a function:
- SELECT count(*) FROM Works;
- SELECT count(*) FROM Works WHERE pages > 500;
- SELECT count(*) FROM Works WHERE pages <= 500;

What is missing?
- NULL values in operations always return NULL
- it means "I don't know"
- protection to avoid taking wrong conclusions
so this won't work
- SELECT * FROM Works WHERE pages=NULL;
- SELECT * FROM Works WHERE pages!=NULL;
Instead
- SELECT * FROM Works WHERE pages IS NULL;
- SELECT * FROM Works WHERE pages IS NOT NULL;
This is very important
- better than using placeholders or negative numbers or zero

ALWAYS TEST FOR NULL in production!



- challenge: Write a query that sorts the authors table by date born, omitting entries for which the date is not known (i.e., is null).



JOIN
- get back to slide 1
- primary key / foreign key
- used to join tables together
We have a list of ITEMS that reference Work_IDs (foreign & primary keys). We should be able to combine this information?

What happens if we just type

- SELECT * FROM Items JOIN Works;
- SELECT count(*) FROM Items JOIN Works;

Why 800? Because every combination of 20 works and 40 items.

we have to specify how the tables are joined
- SELECT * FROM Items JOIN Works ON Items.Work_ID=Works.Work_ID;

note the dot notation
select only what's needed
dot notation can be used to distinguish if columns has same name in different tables
- SELECT Items.Barcode, Works.Title, Works.ISBN FROM Items JOIN Works ON Items.Work_ID=Works.Work_ID LIMIT 10;


-- CHALLENGE --

Authority file. The relationship between Works and Authors is coded into the table Works_Authors. Can you write a query that displays all the authors involved with SQL in a Nutshell 3rd edition, along with their role?


SELECT Works_Authors.Role, Authors.Personal, Authors.Family 
FROM   Works_Authors 
JOIN   Authors 
ON     Authors.Author_ID=Works_Authors.Author_ID 
WHERE  Works_Authors.Work_ID=1;





Other stuff if we have time



Aggregation, count(), max(), avg(), sum()
- SELECT sum(Pages) FROM Works WHERE Publisher="Wiley";
- SELECT min(Pages), max(Pages) FROM Works Where Publisher='O''Reilly';

We've already seen the count() function.
Can be used with * or specific column, doesn't matter, will count # of rows returned.

What happens if I combine aggregate functions with regular column names?

- SELECT Publisher, count(Title) FROM Works;

This counts all the titles, returns only one line, arbitrary publisher. We need to tell SQL how it should group records.

- SELECT Publisher, count(Title) FROM Works GROUP BY Publisher

-- CHALLENGE --

Write a query that lists the amount of books published for each year in the catalog, and gives their average number of pages.





OPERATIONS

This actually works SELECT 1+2


Say that we are interested in finding out the time it takes to read those books. We know from experimental research that it takes on average 45 seconds to read a page for books that have been published by Wiley.

- SELECT Title, 45*Pages FROM Works WHERE Publisher = "Wiley"

gives us the amount in seconds. Now if we want hours, we divide by 3600.

- SELECT Title, 45*Pages/3600 FROM Works WHERE Publisher = "Wiley";


-- CHALLENGE

Our research further shows that it takes on average 38 seconds to read a page of a book that has been published by O'Reilly, but we have to add an extra 89 minutes for each book that is spend looking up references online. Write a query to compute the amount of hours required to read those titles.

	SELECT Title, 38*Pages/3600+89/60 FROM Works WHERE Publisher = "O'Reilly";


Don't these numbers appear too round to be true? What happens if I type?

SELECT Title, 38.0*Pages/3600+89/60 FROM Works WHERE Publisher = "O'Reilly";


Now what if we want to combine the result of our two last queries together in a single query. We use the UNION statement:


SELECT Title, 45*Pages/3600 FROM Works WHERE Publisher = "Wiley" UNION SELECT Title, 38*Pages/3600+89/60 FROM Works WHERE Publisher = "O'Reilly";



CREATE, DROP

Try typing .schema
CREATE TABLE Authors(Author_ID integer, Family text, Personal text, Occupation text, Birth integer, Death integer);
CREATE TABLE Items(Item_ID integer, Work_ID integer, Barcode text, Acquired integer, Status text);
CREATE TABLE Works(Work_ID integer, Title text, ISBN text, Date integer, Place text, Publisher text, Edition text, Pages integer);
CREATE TABLE Works_Authors(Work_ID integer, Author_ID integer, Role text);

We can delete a whole table including its data (WARNING!!!) with DROP

DROP TABLE Works_Authors;

Different data types


INSERT, UPDATE, DELETE

- INSERT INTO authors VALUES(25,'Shakespeare', 'William', 'Playwright', NULL, 1616);
We have to specify values for all columns in order of the CREATE statement. NULL when we want to left it empty.
Otherwise use

- INSERT INTO authors(Family, Personal, Birth) VALUES('Atwood', 'Margaret', 1939);

We can also insert data from other tables:
- CREATE TABLE Author_names(family text, personal text);
- INSERT INTO Author_names SELECT family, personal FROM Authors;
- SELECT * FROM Author_names;

-- CHALLENGE --

Create a table that contains only publisher names from the Works table. Warning: avoid duplicates!


To alter the content of a row:
- UPDATE Works SET Date=2006 WHERE Work_ID=20;
Multiple fields work too:
- UPDATE Works SET Date=2005, Edition='1st' WHERE Work_ID=20;

WARNING: do not forget the WHERE clause, otherwise will overwrite everything. SQL doesn't do UNDO.

To remove a row
- DELETE FROM Authors WHERE family='Atwood';

Delete everything, omit the WHERE clause.
Say you made a mistake in the challenge above. To clear the table:
- DELETE FROM Publishers;

-- CHALLENGES --
- The number of pages for 'SQL for dummies', 8th edition is 480. Update the Works table accordingly.

- In the Authors table, NULL can either mean 'I don't know' or still living (if death is empty). Write a statement that replaces the null value in death with the string 'ALIVE' for authors where only the birth date is known.

	UPDATE Authors SET Death='ALIVE' WHERE Birth IS NOT NULL AND Death IS NULL;
	

Back up with SQL

Look at the .dump statement







DATA HYGIENE
Rules of good data
1. Every value should be ATOMIC (i.e. not contain parts that we might want to work with separately)
	e.g. separating family and personal names, space is not reliable. Different cultures.
2. Every record should have a unique primary key
	can be a serial number (e.g. work_id)
	or can be one of the value (or even pair) that is known to be unique.
3. There should be no redundant information
	difference with spreadsheet
4. For tables containing numeric data, units should be explicitly mentioned

